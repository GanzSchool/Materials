**A hiányos kódban az alábbi négy helyen (`[1], [2], [3], [4]`) szerepelnek kommentek. Mindegyik részhez tartozik egy-egy kérdés és három válaszlehetőség. A három közül az **a)** a helyes, de a kódban csak a komment látható, így a diák ide töltheti be a jó megoldást.**

---

```html
<!DOCTYPE html>
<html lang="hu">
<head>
  <meta charset="UTF-8" />
  <title>Üzenet Késleltetés</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: linear-gradient(135deg, #ffafbd, #ffc3a0);
      height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      font-family: Arial, sans-serif;
    }
    h1 {
      font-size: 2rem;
      color: #333;
      opacity: 1;              
      transition: opacity 1s ease-in; 
    }
  </style>
</head>
<body>

  <h1 id="message"></h1>

  <script>

    const uzenet = document.[1]("message");

    [2](() => {

      uzenet.[3] = "Késleltetett üzenet";
    }, [4]);
  </script>
</body>
</html>
```

---

## Kérdések és válaszlehetőségek

1. **(Hely: `[1]`)**  
   *Melyik függvényt használjuk a `document` objektumon, hogy az `"message"` azonosítójú elemet kiválasszuk?*  
   a) **getElementById**  
   b) querySelector  
   c) getElementsByClassName  

2. **(Hely: `[2]`)**  
   *Melyik időzítő függvényt kell ide írni, hogy egy bizonyos idő elteltével egyszer fusson le a kódrészlet?*  
   a) **setTimeout**  
   b) setInterval  
   c) clearTimeout  

3. **(Hely: `[3]`)**  
   *Melyik tulajdonságot módosítjuk, hogy szöveget jelenítsünk meg az elemen belül?*  
   a) **textContent**  
   b) innerHTML  
   c) style  

4. **(Hely: `[4]`)**  
   *Hány milliszekundumot kell megadni, hogy a kódrészlet 3 másodperc múlva fusson?*  
   a) **3000**  
   b) 5000  
   c) 1000  

---

**Megjegyzés**: A fenti kódban tehát a négyzetes zárójeles kommentek helyére a helyes válasz(ok) kerülnek. Ezzel kiegészítve a kód ismét teljes értékű lesz. A diák így gyakorolhatja az időzítőfüggvények és a DOM-kezelés alapjait.


Az alábbiakban látható a hiányos kód, benne a hét darab `[szám]` jelöléssel. Ezután következik mind a 7 helyre egy-egy kérdés, mindegyikhez három válaszlehetőséggel (a, b, c), ahol **az a)** a helyes.

---

```html
<!DOCTYPE html>
<html lang="hu">
<head>
  <meta charset="UTF-8" />
  <title>Szövegszín Váltás</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: linear-gradient(45deg, #2b5876, #4e4376);
      height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-family: Arial, sans-serif;
      text-align: center;
    }
    h1 {
      font-size: 3rem;
      transition: color 0.5s ease-in-out;
    }
  </style>
</head>
<body>
  <h1 id="colorText">Színes Szöveg</h1>

  <script>
    [1] szoveg = document.getElementById([2]);
    const szinek = ["#ff5722", "#2196f3", "#4caf50", "#e91e63", "#9c27b0", "#ffc107"];
    let index = 0;

    [3](() => {
      [4].[5] = szinek[index];
      index = (index + 1) [6] szinek.length;
    }, [7]);
  </script>
</body>
</html>
```

---

## Kérdések és válaszlehetőségek

### 1. (Hely: `[1]`)
**Melyik változót kell használnunk, hogy deklaráljuk a `szoveg` változót? Szeretnénk, hogy ez egy állandó változó lenne!**  
a) **const**  
b) var  
c) function  

### 2. (Hely: `[2]`)
**Melyik szöveges paraméterrel kérjük le a `<h1>` elemet a `document.getElementById` segítségével?**  
a) **"colorText"**  
b) "message"  
c) "title"  

### 3. (Hely: `[3]`)
**Melyik időzítő függvényt hívjuk meg, ha ismétlődően, folyamatosan szeretnénk futtatni a callbacket?**  
a) **setInterval**  
b) setTimeout  
c) clearInterval  

### 4. (Hely: `[4]`)
**Melyik objektumra vagy property-láncra hivatkozunk, hogy a szöveg színét állítani tudjuk?**  
a) **szoveg.style**  
b) document  
c) window.location  

### 5. (Hely: `[5]`)
**Melyik CSS-tulajdonságot módosítjuk, hogy a szöveg színét megváltoztassuk?**  
a) **color**  
b) backgroundColor  
c) fontSize  

### 6. (Hely: `[6]`)
**Melyik operátort használjuk, hogy az `index` ne lépje túl a tömb hosszát, azaz körforgást hozzunk létre?**  
a) **%**  
b) +  
c) -  

### 7. (Hely: `[7]`)
**Hány milliszekundumonként fut le a callback, ha 1 másodpercenként akarunk színt váltani?**  
a) **1000**  
b) 500  
c) 2000  

---

**Megjegyzés**:  
- A fenti kérdések a kód hiányos pontjaira vonatkoznak.  
- Az **a)** mindig a helyes válasz, de a kódban csak a kommentek vannak, hogy a diák lássa, hova kell beilleszteni a jó megoldást.  


Az alábbiakban megtalálod a **hiányos kódot** és hozzá a **15 kérdést**. Minden kérdéshez **3 válaszlehetőség** tartozik (a, b, c), ahol **az a)** a helyes. A kódban a kommentek (`[1]`, `[2]`, … `[15]`) mutatják, hova kell a diák által beírni a hiányzó kódrészletet.

---

```html
<!DOCTYPE html>
<html lang="hu">
<head>
  <meta charset="UTF-8">
  <title>clearInterval Példa - Számláló</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: linear-gradient(160deg, #02aab0, #00cdac);
      height: 100vh;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      font-family: Arial, sans-serif;
      color: #ffffff;
    }
    #counter {
      font-size: 4rem;
      margin-bottom: 20px;
    }
    button {
      padding: 10px 20px;
      font-size: 1rem;
      border: none;
      cursor: pointer;
      background-color: #222;
      color: #fff;
      transition: background-color 0.3s;
    }
    button:hover {
      background-color: #555;
    }
  </style>
</head>
<body>
  <div [1]="counter">0</div>
  <button [2]="stopButton">Stop</button>

  <script>
    [3] szamlalo = 0;
    const kijelzes = document.getElementById([4]);
    [5] stopGomb = document.[6]("stopButton");

    const intervallum = [7](() => {
      szamlalo[8];
      kijelzes.textContent = [9];
    }, [10]);

    [11].[12]("[13]", () => {
      [14]([15]);
    });
  </script>
</body>
</html>
```

---

## A 15 kérdés és a válaszlehetőségek

1. **(Hely: `[1]`)**  
   *Melyik HTML-attribútumot kell megadnunk, hogy a `<div>` azonosítója `"counter"` legyen?*  
   a) **id**  
   b) class  
   c) name  

2. **(Hely: `[2]`)**  
   *Melyik HTML-attribútumot kell megadnunk, hogy a `<button>` azonosítója `"stopButton"` legyen?*  
   a) **id**  
   b) class  
   c) name  

3. **(Hely: `[3]`)**  
   *Milyen kulcsszóval deklaráljuk (hozzuk létre) a `szamlalo` változót? Azt szeretnénk, hogy ez egy felülírható változó legyen!*  
   a) **let**  
   b) var  
   c) const  

4. **(Hely: `[4]`)**  
   *Milyen stringet kell megadnunk a `document.getElementById(...)` függvénynek, hogy a `#counter` elemet kapjuk vissza?*  
   a) **"counter"**  
   b) "stopButton"  
   c) "idCounter"  

5. **(Hely: `[5]`)**  
   *Milyen kulcsszóval hozzuk létre a `stopGomb` nevű változót? Azt szeretnénk, hogy ez egy állandó változó legyen!*  
   a) **const**  
   b) var  
   c) let  

6. **(Hely: `[6]`)**  
   *Melyik metódust hívjuk meg a `document` objektumon, hogy a `"stopButton"` azonosítójú elemet kapjuk?*  
   a) **getElementById**  
   b) querySelector  
   c) getElementsByName  

7. **(Hely: `[7]`)**  
   *Melyik időzítő függvényt használjuk itt, hogy ismétlődően fusson a callback?*  
   a) **setInterval**  
   b) setTimeout  
   c) clearInterval  

8. **(Hely: `[8]`)**  
   *Hogyan növeljük a `szamlalo` változó értékét a callback függvényen belül?*  
   a) **++**
   b) --  
   c) 1 

9. **(Hely: `[9]`)**  
   *Mit írunk a `kijelzes.textContent` tulajdonságba, hogy megjelenítse a számláló értékét?*  
   a) **szamlalo**  
   b) kijelzes  
   c) 1000  

10. **(Hely: `[10]`)**  
    *Melyik számot adjuk meg a setInterval-nek, hogy 1 másodpercenként fusson a kódrészlet?*  
    a) **1000**  
    b) 1  
    c) 100

11. **(Hely: `[11]`)**  
    *Melyik változót használjuk, hogy a gombunkra (`Stop` gomb) eseményfigyelőt tegyünk?*  
    a) **stopGomb**  
    b) kijelzes  
    c) szamlalo  

12. **(Hely: `[12]`)**  
    *Melyik metódussal kötünk egy eseményt egy elemhez?*  
    a) **addEventListener**  
    b) onclick  
    c) createEventListener  

13. **(Hely: `[13]`)**  
    *Melyik eseményt szeretnénk figyelni, hogy a gombra kattintva lefusson a callback?*  
    a) **"click"**  
    b) "change"  
    c) "hover"  

14. **(Hely: `[14]`)**  
    *Melyik függvényt hívjuk meg a callbackben, hogy leállítsuk az időzített ciklust?*  
    a) **clearInterval**  
    b) setTimeout  
    c) clearTimeout  

15. **(Hely: `[15]`)**  
    *Melyik változót kell átadnunk a függvénynek, hogy leálljon a számláló?*  
    a) **intervallum**  
    b) szamlalo  
    c) stopGomb  

---

### Hogyan használjuk?

- A **kódban** a `[1]` ... `[15]` kommentek helyére a diák beírhatja a fenti kérdések **helyes** megoldását (az **a)** válaszokat).  
- A rossz válaszok (b, c) segítségével láthatjuk, milyen típusú hibák merülhetnek fel, ha valaki nem a megfelelő kifejezést használja.  
- A teljes és helyes kód összerakásával egy **működő** számláló alkalmazást kapunk, amelyet a `Stop` gombbal tudunk leállítani.  

Jó tanulást és gyakorlást!


Az alábbiakban megtalálod a **hiányos kódot** és hozzá a **14 kérdést**. Minden kérdéshez **3 válaszlehetőség** tartozik (a, b, c), ahol **az a)** a helyes. A kódban a kommentek (`[1]`, `[2]`, … `[14]`) mutatják, hova kell a diák által beírni a hiányzó kódrészletet.

---

```html
<!DOCTYPE html>
<html lang="hu">
<head>
  <meta charset="UTF-8" />
  <title>Kombinált Példa - Diavetítés, Manuális Leállítással</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      background: linear-gradient(90deg, #ff9966, #ff5e62);
      font-family: Arial, sans-serif;
      color: #fff;
    }
    h1 {
      margin-bottom: 20px;
    }
    .slideshow-container {
      position: relative;
      width: 400px;
      height: 300px;
      overflow: hidden;
      border: 3px solid #fff;
      border-radius: 8px;
      margin-bottom: 20px;
    }
    .slideshow-container img {
      position: absolute;
      width: 100%;
      height: 100%;
      object-fit: cover;
      opacity: 0;
      transition: opacity 1s ease-in-out;
    }
    #uzenet {
      font-size: 1.2rem;
      opacity: 0;
      transition: opacity 0.5s ease-in;
      margin-bottom: 20px;
    }
    #uzenet.lathato {
      opacity: 1;
    }
    button {
      padding: 10px 20px;
      font-size: 1rem;
      border: none;
      cursor: pointer;
      background-color: #111;
      color: #fff;
      border-radius: 5px;
    }
    button:hover {
      background-color: #333;
    }
    .slideshow-container img.active {
      opacity: 1;
    }
  </style>
</head>
<body>
  <h1>Diavetítés</h1>
  <div [1]="slideshow-container">

    <img src="https://picsum.photos/id/1011/400/300" class="[2]" alt="Kép 1">
    <img src="https://picsum.photos/id/1012/400/300" alt="Kép 2">
    <img src="https://picsum.photos/id/1013/400/300" alt="Kép 3">
    <img src="https://picsum.photos/id/1015/400/300" alt="Kép 4">
  </div>
  <button [3]="stopBtn">Diavetítés leállítása</button>
  <div id="uzenet"></div>

  <script>
    [4] kepek = document.[5]([6]);
    const stopGomb = document.getElementById("stopBtn");
    const uzenet = document.[7]([8]);

    [9] aktualisIndex = 0;


    const valtogatas = [10](() => {
      kepek[aktualisIndex].classList.remove("active");
      aktualisIndex = (aktualisIndex + 1) % [11];
      kepek[aktualisIndex].classList.add("active");
    }, [12]);


    stopGomb.addEventListener("click", () => {
      [13]([14]);
      uzenet.classList.add("lathato");
    });
  </script>
</body>
</html>
```

---

## A 14 kérdés és a válaszlehetőségek

### 1. (Hely: `[1]`)
**Melyik HTML-attribútum szükséges, hogy a `<div>` a `slideshow-container` osztályt kapja meg?**  
a) **class**  
b) id  
c) name  

### 2. (Hely: `[2]`)
**Melyik class-értéket kell megadnunk az első képnél, hogy kezdetben látható legyen?**  
a) **"active"**  
b) "show"  
c) "visible"  

### 3. (Hely: `[3]`)
**Melyik attribútumot írjuk a `<button>` elemhez, ha a gombot „stopBtn”-ként szeretnénk hivatkozni JavaScriptben?**  
a) **id**  
b) class  
c) type  

### 4. (Hely: `[4]`)
**Milyen kulcsszóval deklaráljuk a `kepek` nevű változót? Szeretnénk, hogy ez egy állandó változó legyen!**  
a) **const**  
b) let  
c) var  

### 5. (Hely: `[5]`)
**Melyik függvényt használjuk, ha egyszerre több elemet szeretnénk lekérdezni a DOM-ból?**  
a) **querySelectorAll**  
b) querySelectorFull 
c) createElementAll

### 6. (Hely: `[6]`)
**Melyik szelektort adjuk át a metódusunknak, ha a `slideshow-container` osztályon belüli képeket (img) akarjuk lekérni?**  
a) **".slideshow-container img"**  
b) "#slideshow-container"  
c) "img"  

### 7. (Hely: `[7]`)
**Melyik DOM-függvényt hívjuk meg, hogy az „uzenet” azonosítójú elemet kapjuk meg?**  
a) **getElementById**  
b) querySelector  
c) getElementsByClassName  

### 8. (Hely: `[8]`)
**Melyik stringgel kérjük le a `<div id="uzenet">` elemet?**  
a) **"uzenet"**  
b) "stopBtn"  
c) "kepek"  

### 9. (Hely: `[9]`)
**Melyik kulcsszóval deklaráljuk az `aktualisIndex` változót, ha később módosítani fogjuk?**  
a) **let**  
b) const  
c) var  

### 10. (Hely: `[10]`)
**Melyik időzítőfüggvényt használjuk, hogy bizonyos másodpercenként ismétlődően fusson a diavetítő callback?**  
a) **setInterval**  
b) setTimeout  
c) requestAnimationFrame  

### 11. (Hely: `[11]`)
**Milyen értékkel kell műveletet végezni `(aktualisIndex + 1)`, hogy körbeérjen a képek tömbjén?**  
a) **kepek.length**  
b) 4  
c) kepek.size  


(Hely: `[13]`)
**Melyik függvényt kell meghívnunk, hogy leállítsuk a setInterval által létrehozott váltást?**  
a) **clearInterval**  
b) clearTimeout  
c) stopInterval  


(Hely: `[14]`)
**Melyik változót kell átadnunk a függvénynek, hogy leálljon a diavetítés?**  
a) **valtogatas**  
b) aktualisIndex  
c) kepek  



---

### Hogyan használjuk?

- A **kódban** a `[1]` ... `[14]` kommentek helyére a diák beírhatja a fenti kérdések **helyes** megoldását (az **a)** válaszokat).  
- A rossz válaszok (b, c) segítségével látható, milyen alternatívák lehetnek – de a kód csak a helyes megoldásokkal lesz teljesen működőképes.  
- Ha mind a 14 üres helyre beírja a tanuló az **a)** válaszokat, a diavetítő megfelelően működik, és a `stopBtn` kattintásra leállítja a váltást, majd megjeleníti az üzenetet.  

Jó tanulást és gyakorlást!