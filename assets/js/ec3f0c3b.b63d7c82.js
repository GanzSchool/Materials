"use strict";(self.webpackChunkganz_school_materials=self.webpackChunkganz_school_materials||[]).push([[372],{9192:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>i,contentTitle:()=>r,default:()=>g,frontMatter:()=>o,metadata:()=>l,toc:()=>k});const l=JSON.parse('{"id":"Webprogramoz\xe1s/JavaScript/03 Halad\xf3/13 Aszinkron Javascript/03.1.3","title":"Call Stack, Call Queue, Eventloop","description":"Mi az a Call Stack?","source":"@site/docs/Webprogramoz\xe1s/JavaScript/03 Halad\xf3/13 Aszinkron Javascript/03.1.3.mdx","sourceDirName":"Webprogramoz\xe1s/JavaScript/03 Halad\xf3/13 Aszinkron Javascript","slug":"/Webprogramoz\xe1s/JavaScript/03 Halad\xf3/13 Aszinkron Javascript/03.1.3","permalink":"/Materials/docs/Webprogramoz\xe1s/JavaScript/03 Halad\xf3/13 Aszinkron Javascript/03.1.3","draft":false,"unlisted":false,"editUrl":"https://github.com/GanzSchool/Materials/edit/main/docs/Webprogramoz\xe1s/JavaScript/03 Halad\xf3/13 Aszinkron Javascript/03.1.3.mdx","tags":[],"version":"current","frontMatter":{"title":"Call Stack, Call Queue, Eventloop","sidebar_label":"Javascript Aszinkron M\u0171k\xf6d\xe9se"},"sidebar":"mySidebar","previous":{"title":"Bevezet\xe9s az aszinkron JavaScriptbe","permalink":"/Materials/docs/Webprogramoz\xe1s/JavaScript/03 Halad\xf3/13 Aszinkron Javascript/"},"next":{"title":"Aszinkron programoz\xe1s Callbackek seg\xedts\xe9g\xe9vel","permalink":"/Materials/docs/Webprogramoz\xe1s/JavaScript/03 Halad\xf3/13 Aszinkron Javascript/13.1 Aszinkron programoz\xe1s Callbackek seg\xedts\xe9g\xe9vel/"}}');var n=t(4848),s=t(8453);t(6540);const o={title:"Call Stack, Call Queue, Eventloop",sidebar_label:"Javascript Aszinkron M\u0171k\xf6d\xe9se"},r=void 0,i={},k=[{value:"Mi az a Call Stack?",id:"mi-az-a-call-stack",level:2},{value:"Mi az a Call Queue?",id:"mi-az-a-call-queue",level:2},{value:"Mi az az EventLoop?",id:"mi-az-az-eventloop",level:2},{value:"Nem adja ki?",id:"nem-adja-ki",level:2}];function z(e){const a={code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",strong:"strong",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(a.h2,{id:"mi-az-a-call-stack",children:"Mi az a Call Stack?"}),"\n",(0,n.jsx)(a.p,{children:"A Call Stack, vagyis a h\xedv\xe1si verem, a JavaScript m\u0171k\xf6d\xe9s\xe9nek egyik alapvet\u0151 eleme, amely seg\xedt nyomon k\xf6vetni a fut\xf3 f\xfcggv\xe9nyh\xedv\xe1sokat. Ez egy olyan adatstrukt\xfara, amely a program v\xe9grehajt\xe1sa sor\xe1n fel\xe9p\xfcl, amikor a f\xfcggv\xe9nyeket megh\xedvjuk, \xe9s lebomlik, amikor azok befejez\u0151dnek. A h\xedv\xe1si verem m\u0171k\xf6d\xe9se hasonl\xf3 egy val\xf3di veremhez: az utolj\xe1ra betett elem az els\u0151, amit visszah\xfaznak (Last In, First Out \u2013 LIFO)."}),"\n",(0,n.jsx)(a.p,{children:"Amikor egy JavaScript program fut, a motor l\xe9trehoz egy h\xedv\xe1si veremet, amely tartalmazza az aktu\xe1lisan fut\xf3 f\xfcggv\xe9nyeket. Minden alkalommal, amikor egy f\xfcggv\xe9ny megh\xedv\xe1sra ker\xfcl, a motor hozz\xe1adja azt a verem tetej\xe9hez. Amikor a f\xfcggv\xe9ny v\xe9grehajt\xe1sa befejez\u0151dik, elt\xe1vol\xedt\xe1sra ker\xfcl a verem tetej\xe9r\u0151l, \xe9s a vez\xe9rl\xe9s visszat\xe9r a veremben l\xe9v\u0151 kor\xe1bbi f\xfcggv\xe9nyhez."}),"\n",(0,n.jsx)(a.p,{children:"Ez a mechanizmus lehet\u0151v\xe9 teszi a program sz\xe1m\xe1ra, hogy pontosan tudja, melyik f\xfcggv\xe9ny \xe9ppen fut, \xe9s hogyan kell visszat\xe9rni az el\u0151z\u0151 \xe1llapotokhoz. P\xe9ld\xe1ul, ha egy f\xfcggv\xe9ny megh\xedv egy m\xe1sik f\xfcggv\xe9nyt, az \xfaj f\xfcggv\xe9ny hozz\xe1ad\xf3dik a verem tetej\xe9hez, \xe9s miut\xe1n az befejez\u0151dik, elt\xe1vol\xedt\xe1sra ker\xfcl, visszat\xe9rve az el\u0151z\u0151 f\xfcggv\xe9ny v\xe9grehajt\xe1s\xe1hoz."}),"\n",(0,n.jsx)(a.p,{children:"A Call Stack k\xfcl\xf6n\xf6sen fontos a rekurz\xedv f\xfcggv\xe9nyh\xedv\xe1sok eset\xe9n, ahol egy f\xfcggv\xe9ny \xf6nmag\xe1t h\xedvja meg. Ilyenkor minden \xfajabb h\xedv\xe1s hozz\xe1ad\xf3dik a verem tetej\xe9hez, \xe9s csak azut\xe1n kezd\u0151dik a verem lebont\xe1sa, amikor minden rekurz\xedv h\xedv\xe1s befejez\u0151dik. Ez biztos\xedtja, hogy a program helyesen kezelje a m\xe9lyen be\xe1gyazott f\xfcggv\xe9nyh\xedv\xe1sokat is."}),"\n",(0,n.jsx)(a.p,{children:"A Call Stack seg\xedts\xe9g\xe9vel a JavaScript motor k\xe9pes kezelni a szinkron m\u0171veleteket, \xe9s gyorsan reag\xe1lni a f\xfcggv\xe9nyh\xedv\xe1sokra \xe9s visszat\xe9r\xe9sekre. Ez a rendszer alapvet\u0151 a programok hibakeres\xe9s\xe9ben is, mivel a hib\xe1k eset\xe9n a verem \xe1llapota megmutatja, melyik f\xfcggv\xe9nyek h\xedvt\xe1k egym\xe1st, ami seg\xedt azonos\xedtani a probl\xe9ma forr\xe1s\xe1t."}),"\n",(0,n.jsx)(a.p,{children:"Fontos meg\xe9rteni, hogy a Call Stack korl\xe1tozott m\xe9ret\u0171, \xe9s ha t\xfal sok f\xfcggv\xe9nyh\xedv\xe1s t\xf6rt\xe9nik, a verem t\xfalcsordulhat (stack overflow), ami programhibahez vezethet. Ez k\xfcl\xf6n\xf6sen gyakori rekurz\xedv f\xfcggv\xe9nyekn\xe9l, ha nincs megfelel\u0151 felt\xe9tel a le\xe1ll\xe1shoz."}),"\n",(0,n.jsx)(a.p,{children:"A Call Stack szerepe nemcsak a f\xfcggv\xe9nyh\xedv\xe1sok nyomon k\xf6vet\xe9s\xe9ben rejlik, hanem abban is, hogy seg\xedt meg\xe9rteni a JavaScript aszinkron m\u0171k\xf6d\xe9s\xe9t. B\xe1r a Call Stack mag\xe1ban szinkron, egy\xfcttm\u0171k\xf6dik m\xe1s mechanizmusokkal, mint az Event Loop, hogy kezelje az aszinkron feladatokat. Amikor egy aszinkron m\u0171velet, p\xe9ld\xe1ul egy id\u0151z\xedt\u0151 vagy egy h\xe1l\xf3zati k\xe9r\xe9s befejez\u0151dik, az eredm\xe9nye egy k\xfcl\xf6n sorba ker\xfcl, \xe9s az Event Loop biztos\xedtja, hogy ezek a feladatok megfelel\u0151en ker\xfcljenek a verembe a megfelel\u0151 id\u0151ben."}),"\n",(0,n.jsx)(a.p,{children:"\xd6sszefoglalva, a Call Stack a JavaScript motor egyik alapvet\u0151 komponense, amely lehet\u0151v\xe9 teszi a f\xfcggv\xe9nyh\xedv\xe1sok hat\xe9kony kezel\xe9s\xe9t \xe9s a program logikus v\xe9grehajt\xe1s\xe1t. Meg\xe9rt\xe9se kulcsfontoss\xe1g\xfa a hibakeres\xe9sben, a rekurz\xedv algoritmusok meg\xedr\xe1s\xe1ban, \xe9s az aszinkron programoz\xe1si mint\xe1k meg\xe9rt\xe9s\xe9ben is. Ez a mechanizmus biztos\xedtja, hogy a JavaScript k\xf3d z\xf6kken\u0151mentesen \xe9s hat\xe9konyan fusson, hozz\xe1j\xe1rulva a dinamikus \xe9s interakt\xedv webalkalmaz\xe1sok siker\xe9hez."}),"\n",(0,n.jsx)(a.h2,{id:"mi-az-a-call-queue",children:"Mi az a Call Queue?"}),"\n",(0,n.jsx)(a.p,{children:"A Call Queue, vagyis a h\xedv\xe1ssor, a JavaScript aszinkron m\u0171veleteinek kezel\xe9s\xe9ben j\xe1tszik fontos szerepet. Ez egy olyan v\xe1r\xf3lista, ahol az aszinkron m\u0171veletek eredm\xe9nyeit tartjuk, hogy k\xe9s\u0151bb, a megfelel\u0151 id\u0151ben v\xe9grehajtsuk \u0151ket."}),"\n",(0,n.jsxs)(a.p,{children:["Amikor egy aszinkron m\u0171velet, p\xe9ld\xe1ul egy id\u0151z\xedt\u0151 (",(0,n.jsx)(a.code,{children:"setTimeout"}),") vagy egy h\xe1l\xf3zati k\xe9r\xe9s befejez\u0151dik, az eredm\xe9ny\xe9t a Call Queue-ba helyezi. Az Event Loop, amely a JavaScript fut\xe1s\xe1nak k\xf6zponti eleme, folyamatosan ellen\u0151rzi, hogy a Call Stack (h\xedv\xe1si verem) \xfcres-e. Ha igen, akkor az Event Loop \xe1tveszi a Call Queue-b\xf3l a k\xf6vetkez\u0151 feladatot, \xe9s azt betolja a Call Stack-ba v\xe9grehajt\xe1sra."]}),"\n",(0,n.jsx)(a.p,{children:"Ez a mechanizmus lehet\u0151v\xe9 teszi, hogy a JavaScript egyetlen sz\xe1lon dolgozzon, mik\xf6zben k\xe9pes kezelni t\xf6bb aszinkron m\u0171veletet is. A Call Queue seg\xedt abban, hogy a feladatok rendezett sorrendben ker\xfcljenek v\xe9grehajt\xe1sra, an\xe9lk\xfcl, hogy blokkoln\xe1k a f\u0151 program fut\xe1s\xe1t. \xcdgy a weboldalak z\xf6kken\u0151mentesen reag\xe1lhatnak a felhaszn\xe1l\xf3i interakci\xf3kra, mik\xf6zben h\xe1tt\xe9rben t\xf6bb aszinkron m\u0171velet is zajlik."}),"\n",(0,n.jsx)(a.p,{children:"P\xe9ld\xe1ul, ha egy gombra kattintunk, \xe9s ez egy h\xe1l\xf3zati k\xe9r\xe9s ind\xedt\xe1s\xe1t eredm\xe9nyezi, a k\xe9r\xe9s elk\xfcld\xe9se ut\xe1n a JavaScript folytatja a tov\xe1bbi m\u0171veletek v\xe9grehajt\xe1s\xe1t. Amikor a h\xe1l\xf3zati v\xe1lasz meg\xe9rkezik, az eredm\xe9nyt a Call Queue-ba helyezi, majd az Event Loop biztos\xedtja, hogy ez a v\xe1lasz v\xe9grehajt\xe1sra ker\xfclj\xf6n, amikor a Call Stack \xfcres lesz."}),"\n",(0,n.jsx)(a.p,{children:"A Call Queue teh\xe1t alapvet\u0151 r\xe9sze a JavaScript aszinkron m\u0171k\xf6d\xe9s\xe9nek, amely lehet\u0151v\xe9 teszi a nyelv sz\xe1m\xe1ra, hogy hat\xe9konyan kezelje a t\xf6bbfeladatos k\xf6rnyezeteket an\xe9lk\xfcl, hogy a program fut\xe1s\xe1t akad\xe1lyozn\xe1. Ez a rendszer biztos\xedtja, hogy a webalkalmaz\xe1sok gyorsan \xe9s g\xf6rd\xfcl\xe9kenyen m\u0171k\xf6djenek, m\xe9g komplex \xe9s sok aszinkron m\u0171velet eset\xe9n is."}),"\n",(0,n.jsx)(a.p,{children:"\xd6sszefoglalva, a Call Queue egy v\xe1r\xf3lista, amely seg\xedti a JavaScript-et az aszinkron m\u0171veletek rendezett \xe9s hat\xe9kony v\xe9grehajt\xe1s\xe1ban. Az Event Loop seg\xedts\xe9g\xe9vel ezek a feladatok sorrendben ker\xfclnek a Call Stack-ba, biztos\xedtva ezzel a program folyamatos \xe9s blokkol\xe1s n\xe9lk\xfcli fut\xe1s\xe1t."}),"\n",(0,n.jsx)(a.h2,{id:"mi-az-az-eventloop",children:"Mi az az EventLoop?"}),"\n",(0,n.jsx)(a.p,{children:"Az EventLoop a JavaScript m\u0171k\xf6d\xe9s\xe9nek alapvet\u0151 mechanizmusa, amely lehet\u0151v\xe9 teszi a nyelv sz\xe1m\xe1ra, hogy hat\xe9konyan kezelje az aszinkron m\u0171veleteket an\xe9lk\xfcl, hogy blokkoln\xe1 a program fut\xe1s\xe1t. Mivel a JavaScript egy egysz\xe1l\xfa nyelv, az EventLoop kulcsszerepet j\xe1tszik abban, hogy a k\xfcl\xf6nb\xf6z\u0151 feladatok p\xe1rhuzamosan fussanak, \xedgy a felhaszn\xe1l\xf3i \xe9lm\xe9ny z\xf6kken\u0151mentes marad."}),"\n",(0,n.jsx)(a.p,{children:"Az EventLoop folyamatosan figyeli a futtat\xe1si k\xf6rnyezetet, \xe9s gondoskodik arr\xf3l, hogy a h\xedv\xe1si verem (call stack) \xfcresed\xe9se ut\xe1n a k\xe9s\u0151bbre halasztott feladatok v\xe9grehajt\xf3djanak. Amikor egy aszinkron m\u0171velet, p\xe9ld\xe1ul egy h\xe1l\xf3zati k\xe9r\xe9s vagy egy id\u0151z\xedtett esem\xe9ny befejez\u0151dik, az eredm\xe9ny\xe9t egy \xfczenetsorba (task queue) helyezi. Az EventLoop ekkor \xe1tvizsg\xe1lja a h\xedv\xe1si veremet, \xe9s ha az \xfcres, \xe1thelyezi a sorban \xe1ll\xf3 feladatokat a verembe, hogy v\xe9grehajts\xe1k \u0151ket."}),"\n",(0,n.jsx)(a.p,{children:"Ezen k\xedv\xfcl l\xe9tezik a mikrofeladat sor (microtask queue), amely a Promisekkel kapcsolatos feladatokat tartalmazza. Az EventLoop el\u0151sz\xf6r ezeket a mikrofeladatokat dolgozza fel, miel\u0151tt a hagyom\xe1nyos feladat sorok fel\xe9 fordulna. Ez biztos\xedtja, hogy a Promisek \xe1ltal visszaadott \xe9rt\xe9kek gyorsan \xe9s hat\xe9konyan kezelhet\u0151k legyenek, jav\xedtva ezzel a k\xf3d teljes\xedtm\xe9ny\xe9t \xe9s reakci\xf3k\xe9szs\xe9g\xe9t."}),"\n",(0,n.jsx)(a.p,{children:"Az EventLoop m\u0171k\xf6d\xe9se h\xe1rom f\u0151 r\xe9szb\u0151l \xe1ll:"}),"\n",(0,n.jsxs)(a.ol,{children:["\n",(0,n.jsxs)(a.li,{children:[(0,n.jsx)(a.strong,{children:"Call Stack (H\xedv\xe1si verem):"})," Itt futnak a szinkron m\u0171veletek. Amikor egy f\xfcggv\xe9ny h\xedv\xe1s t\xf6rt\xe9nik, hozz\xe1ad\xf3dik a verem tetej\xe9hez, majd elt\xe1vol\xedt\xe1sra ker\xfcl, miut\xe1n befejez\u0151d\xf6tt."]}),"\n",(0,n.jsxs)(a.li,{children:[(0,n.jsx)(a.strong,{children:"Task Queue (Feladat sor):"})," Itt v\xe1rnak a k\xe9s\u0151bb v\xe9grehajtand\xf3 aszinkron feladatok, mint p\xe9ld\xe1ul esem\xe9nykezel\u0151k vagy id\u0151z\xedt\u0151k."]}),"\n",(0,n.jsxs)(a.li,{children:[(0,n.jsx)(a.strong,{children:"Microtask Queue (Mikrofeladat sor):"})," Itt helyezkednek el a Promisekkel kapcsolatos feladatok, amelyeket az EventLoop el\u0151bb dolgoz fel, mint a hagyom\xe1nyos feladatokat."]}),"\n"]}),"\n",(0,n.jsx)(a.p,{children:"Az EventLoop biztos\xedtja, hogy a JavaScript k\xf3d rugalmasan \xe9s hat\xe9konyan tudjon reag\xe1lni a felhaszn\xe1l\xf3i interakci\xf3kra, an\xe9lk\xfcl, hogy a program lefagyna vagy lassulna. Ez a mechanizmus alapvet\u0151 a modern webalkalmaz\xe1sok dinamikus \xe9s interakt\xedv m\u0171k\xf6d\xe9s\xe9hez, lehet\u0151v\xe9 t\xe9ve a fejleszt\u0151k sz\xe1m\xe1ra, hogy gazdag \xe9s reag\xe1l\xf3k\xe9pes felhaszn\xe1l\xf3i \xe9lm\xe9nyeket hozzanak l\xe9tre."}),"\n",(0,n.jsx)(a.p,{children:"Az EventLoop meg\xe9rt\xe9se seg\xedt abban, hogy jobban \xe1tl\xe1ssuk, hogyan kezelik a JavaScript k\xf6rnyezetek az aszinkron m\u0171veleteket, \xe9s hogyan optimaliz\xe1lhatjuk k\xf3dunkat a legjobb teljes\xedtm\xe9ny el\xe9r\xe9se \xe9rdek\xe9ben. Ezzel a tud\xe1ssal k\xf6nnyebben k\xe9sz\xedthet\xfcnk olyan alkalmaz\xe1sokat, amelyek gyorsan \xe9s z\xf6kken\u0151mentesen m\u0171k\xf6dnek, megfelelve a modern webes ig\xe9nyeknek."}),"\n",(0,n.jsx)(a.h2,{id:"nem-adja-ki",children:"Nem adja ki?"}),"\n","\n",(0,n.jsx)(a.h1,{id:"what-the-heck-is-the-event-loop-anyway--philip-roberts--jsconf-eu",children:"What the heck is the event loop anyway? | Philip Roberts | JSConf EU"}),"\n",(0,n.jsx)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/8aGhZQkoFbQ?si=KaN3hfvvtWt1tusk",title:"YouTube vide\xf3 lej\xe1tsz\xf3",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowFullScreen:!0}),"\n",(0,n.jsx)(a.h1,{id:"az-al\xe1bbi-szimul\xe1tor-seg\xedts\xe9g\xe9vel-l\xe1that\xf3-hogyan-m\u0171k\xf6dik-a-js-aszinkronit\xe1sa-a-gyakorlatban",children:"Az al\xe1bbi szimul\xe1tor seg\xedts\xe9g\xe9vel l\xe1that\xf3 hogyan m\u0171k\xf6dik a js aszinkronit\xe1sa a gyakorlatban"}),"\n",(0,n.jsx)("iframe",{src:"http://latentflip.com/loupe/?code=JC5vbignYnV0dG9uJywgJ2NsaWNrJywgZnVuY3Rpb24gb25DbGljaygpIHsKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gdGltZXIoKSB7CiAgICAgICAgY29uc29sZS5sb2coJ1lvdSBjbGlja2VkIHRoZSBidXR0b24hJyk7ICAgIAogICAgfSwgMjAwMCk7Cn0pOwoKY29uc29sZS5sb2coIkhpISIpOwoKc2V0VGltZW91dChmdW5jdGlvbiB0aW1lb3V0KCkgewogICAgY29uc29sZS5sb2coIkNsaWNrIHRoZSBidXR0b24hIik7Cn0sIDUwMDApOwoKY29uc29sZS5sb2coIldlbGNvbWUgdG8gbG91cGUuIik7!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4%3D",width:"100%",height:"600px",frameBorder:"2",allowFullScreen:!0,style:{backgroundColor:"#f0f0f0"}})]})}function g(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(z,{...e})}):z(e)}},8453:(e,a,t)=>{t.d(a,{R:()=>o,x:()=>r});var l=t(6540);const n={},s=l.createContext(n);function o(e){const a=l.useContext(s);return l.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function r(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),l.createElement(s.Provider,{value:a},e.children)}}}]);